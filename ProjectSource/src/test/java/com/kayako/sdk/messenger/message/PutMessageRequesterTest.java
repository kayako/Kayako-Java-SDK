package com.kayako.sdk.messenger.message;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.auth.FingerprintAuth;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class PutMessageRequesterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: PutMessageRequester */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 31 branch to line 31
     */
    @Test
    public void init() throws Throwable {
        PutMessageRequester instance;
        {
            /* Arrange */
            String helpCenterUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            long messageId = 0L;
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageBodyParams$MessageStatus");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            PutMessageBodyParams param1 = (PutMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageBodyParams");
            Reflector.setField(param1, "messageStatus", param0);
            PutMessageBodyParams putMessageBodyParams = param1;
            /* Act */
            /* Creating object to test constructor */
            instance = new PutMessageRequester(helpCenterUrl, fingerprintAuth, conversationId, messageId, putMessageBodyParams);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getBodyParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            PutMessageRequester param2 = (PutMessageRequester) Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageRequester");
            Reflector.setField(param2, "mBodyParams", null);
            Reflector.setField(param2, "mConversationId", 0L);
            Reflector.setField(param2, "mMessageId", 0L);
            Reflector.setField(param2, "mHelpCenterUrl", param1);
            Reflector.setField(param2, "mFingerprintAuth", null);
            /* Act */
            retval = param2.getBodyParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHeaders() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            FingerprintAuth param0 = (FingerprintAuth) Reflector.getInstance("com.kayako.sdk.auth.FingerprintAuth");
            param0.setFingerprintId(null);
            String param2 = "";
            PutMessageRequester param3 = (PutMessageRequester) Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageRequester");
            Reflector.setField(param3, "mBodyParams", null);
            Reflector.setField(param3, "mConversationId", 0L);
            Reflector.setField(param3, "mMessageId", 0L);
            Reflector.setField(param3, "mHelpCenterUrl", param2);
            Reflector.setField(param3, "mFingerprintAuth", param0);
            /* Act */
            retval = param3.getHeaders();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            HashMap hashMap = new HashMap();
            hashMap.put("X-Fingerprint-ID", null);
            assertEquals(hashMap, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHelpCenterUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            PutMessageRequester param0 = (PutMessageRequester) Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageRequester");
            Reflector.setField(param0, "mBodyParams", null);
            Reflector.setField(param0, "mConversationId", 0L);
            Reflector.setField(param0, "mMessageId", 0L);
            Reflector.setField(param0, "mHelpCenterUrl", null);
            Reflector.setField(param0, "mFingerprintAuth", null);
            /* Act */
            retval = param0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getQueryParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            PutMessageRequester param2 = (PutMessageRequester) Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageRequester");
            Reflector.setField(param2, "mBodyParams", null);
            Reflector.setField(param2, "mConversationId", 0L);
            Reflector.setField(param2, "mMessageId", 0L);
            Reflector.setField(param2, "mHelpCenterUrl", param1);
            Reflector.setField(param2, "mFingerprintAuth", null);
            /* Act */
            retval = param2.getQueryParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
