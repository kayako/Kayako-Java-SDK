package com.kayako.sdk.messenger.rating;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Constructor;

import static org.junit.Assert.assertNotNull;

public class PutRatingBodyParamsTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: PutRatingBodyParams */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 10 branch to line 10
   */
    @Test
    public void init() throws Throwable {
        Object instance;
        {
            /* Arrange */
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.rating.Rating$SCORE");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            Object score = param0;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.messenger.rating.PutRatingBodyParams");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.kayako.sdk.messenger.rating.Rating$SCORE"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(score);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 14 branch to line 14
   */
    @Test
    public void init1() throws Throwable {
        Object instance;
        {
            /* Arrange */
            Object param2 = Reflector.getInstance("com.kayako.sdk.messenger.rating.Rating$SCORE");
            Reflector.setField(param2, "name", null);
            Reflector.setField(param2, "ordinal", 0);
            Object score = param2;
            String comment = null;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.messenger.rating.PutRatingBodyParams");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.kayako.sdk.messenger.rating.Rating$SCORE"), Reflector.forName("java.lang.String"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(score, comment);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }
}
