package com.kayako.sdk.messenger.conversation;

import com.diffblue.deeptestutils.Reflector;
import java.lang.reflect.Constructor;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class PostConversationBodyParams_SourceTypeTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: PostConversationBodyParams_SourceType */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void $SourceTypeclinit() throws Throwable {
        Object constructed;
        {
            /* Act */
            /* Using constructor to test static initializer */
            constructed = Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams$SourceType");
            assertNotNull(constructed);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 30 branch to line 30
     * conditional line 30 branch to line 34
     */
    @Test
    public void init() throws Throwable {
        Object instance;
        {
            /* Arrange */
            String param8 = "";
            String name = param8;
            String param5 = "";
            String email = param5;
            String param11 = "";
            String subject = param11;
            String param2 = "";
            String contents = param2;
            Object param14 = Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams$SourceType");
            Reflector.setField(param14, "name", null);
            Reflector.setField(param14, "ordinal", 0);
            Object source = param14;
            String clientId = null;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("com.kayako.sdk.messenger.conversation.PostConversationBodyParams$SourceType"), Reflector.forName("java.lang.String"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(name, email, subject, contents, source, clientId);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 18 branch to line 18
     * conditional line 18 branch to line 22
     */
    @Test
    public void init1() throws Throwable {
        Object instance;
        {
            /* Arrange */
            String param6 = "";
            String name = param6;
            String param9 = "";
            String email = param9;
            String param3 = "";
            String subject = param3;
            String param12 = "";
            String contents = param12;
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams$SourceType");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            Object source = param0;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("com.kayako.sdk.messenger.conversation.PostConversationBodyParams$SourceType"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(name, email, subject, contents, source);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getClientId() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "??????";
            String param5 = "????";
            String param7 = "";
            PostConversationBodyParams param8 = (PostConversationBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Reflector.setField(param8, "clientId", null);
            Reflector.setField(param8, "source", null);
            Reflector.setField(param8, "name", param7);
            Reflector.setField(param8, "email", param5);
            Reflector.setField(param8, "subject", param3);
            Reflector.setField(param8, "contents", param1);
            /* Act */
            retval = param8.getClientId();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getContents() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            PostConversationBodyParams param8 = (PostConversationBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Reflector.setField(param8, "clientId", param1);
            Reflector.setField(param8, "source", null);
            Reflector.setField(param8, "name", param7);
            Reflector.setField(param8, "email", param5);
            Reflector.setField(param8, "subject", param3);
            Reflector.setField(param8, "contents", null);
            /* Act */
            retval = param8.getContents();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getEmail() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            PostConversationBodyParams param8 = (PostConversationBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Reflector.setField(param8, "clientId", param1);
            Reflector.setField(param8, "source", null);
            Reflector.setField(param8, "name", param7);
            Reflector.setField(param8, "email", null);
            Reflector.setField(param8, "subject", param5);
            Reflector.setField(param8, "contents", param3);
            /* Act */
            retval = param8.getEmail();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getName() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            PostConversationBodyParams param8 = (PostConversationBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Reflector.setField(param8, "clientId", param1);
            Reflector.setField(param8, "source", null);
            Reflector.setField(param8, "name", null);
            Reflector.setField(param8, "email", param7);
            Reflector.setField(param8, "subject", param5);
            Reflector.setField(param8, "contents", param3);
            /* Act */
            retval = param8.getName();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSource() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            Object param2 = Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams$SourceType");
            Reflector.setField(param2, "name", null);
            Reflector.setField(param2, "ordinal", 0);
            String param4 = "";
            String param6 = "";
            String param8 = "";
            String param10 = "";
            PostConversationBodyParams param11 = (PostConversationBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Reflector.setField(param11, "clientId", param1);
            Reflector.setField(param11, "source", param2);
            Reflector.setField(param11, "name", param10);
            Reflector.setField(param11, "email", param8);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "contents", param4);
            /* Act */
            retval = param11.getSource();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSubject() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "????";
            String param7 = "";
            PostConversationBodyParams param8 = (PostConversationBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.conversation.PostConversationBodyParams");
            Reflector.setField(param8, "clientId", param1);
            Reflector.setField(param8, "source", null);
            Reflector.setField(param8, "name", param7);
            Reflector.setField(param8, "email", param5);
            Reflector.setField(param8, "subject", null);
            Reflector.setField(param8, "contents", param3);
            /* Act */
            retval = param8.getSubject();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
