package com.kayako.sdk.messenger.conversationstarter;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.helpcenter.user.UserMinimal;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class ConversationStarterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ConversationStarter */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void init() throws Throwable {
        ConversationStarter instance;
        {
            /* Arrange */
            String realtimeUrl = null;
            List<UserMinimal> lastActiveAgents = null;
            Double averageReplyTime = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new ConversationStarter(realtimeUrl, lastActiveAgents, averageReplyTime);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getAverageReplyTime() throws Throwable {
        Double retval;
        {
            /* Arrange */
            String param1 = "";
            ConversationStarter param2 = (ConversationStarter) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.ConversationStarter");
            Reflector.setField(param2, "averageReplyTime", null);
            Reflector.setField(param2, "realtimeUrl", param1);
            Reflector.setField(param2, "lastActiveAgents", null);
            /* Act */
            retval = param2.getAverageReplyTime();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLastActiveAgents() throws Throwable {
        List<UserMinimal> retval;
        {
            /* Arrange */
            String param1 = "";
            ConversationStarter param2 = (ConversationStarter) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.ConversationStarter");
            Reflector.setField(param2, "averageReplyTime", null);
            Reflector.setField(param2, "realtimeUrl", param1);
            Reflector.setField(param2, "lastActiveAgents", null);
            /* Act */
            retval = param2.getLastActiveAgents();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getRealtimeUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            ConversationStarter param0 = (ConversationStarter) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.ConversationStarter");
            Reflector.setField(param0, "averageReplyTime", null);
            Reflector.setField(param0, "realtimeUrl", null);
            Reflector.setField(param0, "lastActiveAgents", null);
            /* Act */
            retval = param0.getRealtimeUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
