package com.kayako.sdk.messenger.conversation.fields.status;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Constructor;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class Status_TypeTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: Status_Type */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatus$Typeclinit() throws Throwable {
        Object constructed;
        {
            /* Act */
            /* Using constructor to test static initializer */
            constructed = Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status$Type");
            assertNotNull(constructed);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusinit() throws Throwable {
        Object instance;
        {
            /* Arrange */
            Long id = null;
            String label = null;
            Integer sortOrder = null;
            Object type = null;
            Boolean isSlaActive = null;
            Boolean isDeleted = null;
            Long createdAt = null;
            Long updatedAt = null;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.Long"), Reflector.forName("java.lang.String"), Reflector.forName("java.lang.Integer"), Reflector.forName("com.kayako.sdk.messenger.conversation.fields.status.Status$Type"), Reflector.forName("java.lang.Boolean"), Reflector.forName("java.lang.Boolean"), Reflector.forName("java.lang.Long"), Reflector.forName("java.lang.Long"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(id, label, sortOrder, type, isSlaActive, isDeleted, createdAt, updatedAt);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusgetCreatedAt() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.getCreatedAt();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusgetId() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.getId();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusgetLabel() throws Throwable {
        String retval;
        {
            /* Arrange */
            Status param0 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param0, "isDeleted", null);
            param0.setCreatedAt(null);
            param0.setId(null);
            param0.setLabel(null);
            param0.setUpdatedAt(null);
            param0.setType(null);
            Reflector.setField(param0, "isSlaActive", null);
            param0.setSortOrder(null);
            /* Act */
            retval = param0.getLabel();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusgetSortOrder() throws Throwable {
        Integer retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.getSortOrder();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusgetType() throws Throwable {
        Object retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.getType();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusgetUpdatedAt() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.getUpdatedAt();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusisDeleted() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.isDeleted();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkmessengerconversationfieldsstatusStatusisSlaActive() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param1 = "";
            Status param2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param2, "isDeleted", null);
            param2.setCreatedAt(null);
            param2.setId(null);
            param2.setLabel(param1);
            param2.setUpdatedAt(null);
            param2.setType(null);
            Reflector.setField(param2, "isSlaActive", null);
            param2.setSortOrder(null);
            /* Act */
            retval = param2.isSlaActive();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
}
