package com.kayako.sdk.messenger.conversation.fields.status;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

public class Status_TypeTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: Status_Type */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_getCreatedAt_000_a63f91963fc6dd53() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.getCreatedAt();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_getId_000_23cd583b6563185c() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.getId();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_getSortOrder_000_eb5a9ed40dd0048() throws Throwable {
        Integer retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.getSortOrder();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_getType_000_99838f60a83dd186() throws Throwable {
        Object retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.getType();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_getUpdatedAt_000_1d56ff36b28caa99() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.getUpdatedAt();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_isDeleted_000_a1e946e552d67b11() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.isDeleted();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_messenger_conversation_fields_status_Status_isSlaActive_000_1c13a26c5197707e() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param_1 = "";
            Status param_2 = (Status) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.status.Status");
            Reflector.setField(param_2, "isDeleted", null);
            Reflector.setField(param_2, "createdAt", null);
            Reflector.setField(param_2, "id", null);
            Reflector.setField(param_2, "label", param_1);
            Reflector.setField(param_2, "updatedAt", null);
            Reflector.setField(param_2, "type", null);
            Reflector.setField(param_2, "isSlaActive", null);
            Reflector.setField(param_2, "sortOrder", null);
            /* Act */
            retval = param_2.isSlaActive();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
}
