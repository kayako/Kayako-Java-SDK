package com.kayako.sdk.messenger.rating;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.auth.FingerprintAuth;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class PostRatingRequesterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: PostRatingRequester */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 33 branch to line 33
   * conditional line 34 branch to line 35
   * conditional line 35 branch to line 35
   */
    @Test
    public void init() throws Throwable {
        PostRatingRequester instance;
        {
            /* Arrange */
            String helpdeskUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.rating.Rating$SCORE");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            PostRatingBodyParams param1 = (PostRatingBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.rating.PostRatingBodyParams");
            Reflector.setField(param1, "comment", null);
            Reflector.setField(param1, "score", param0);
            PostRatingBodyParams bodyParams = param1;
            /* Act */
            /* Creating object to test constructor */
            instance = new PostRatingRequester(helpdeskUrl, fingerprintAuth, conversationId, bodyParams);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getBodyParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            PostRatingRequester param2 = (PostRatingRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.PostRatingRequester");
            Reflector.setField(param2, "mFingerprintAuth", null);
            Reflector.setField(param2, "mConversationId", 0L);
            Reflector.setField(param2, "mBodyParams", null);
            Reflector.setField(param2, "mHelpdeskUrl", param1);
            /* Act */
            retval = param2.getBodyParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getHeaders() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            FingerprintAuth param0 = (FingerprintAuth) Reflector.getInstance("com.kayako.sdk.auth.FingerprintAuth");
            Reflector.setField(param0, "fingerprintId", null);
            String param2 = "";
            PostRatingRequester param3 = (PostRatingRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.PostRatingRequester");
            Reflector.setField(param3, "mFingerprintAuth", param0);
            Reflector.setField(param3, "mConversationId", 0L);
            Reflector.setField(param3, "mBodyParams", null);
            Reflector.setField(param3, "mHelpdeskUrl", param2);
            /* Act */
            retval = param3.getHeaders();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            HashMap hashMap = new HashMap();
            hashMap.put("X-Fingerprint-ID", null);
            assertEquals(hashMap, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getHelpCenterUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            PostRatingRequester param0 = (PostRatingRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.PostRatingRequester");
            Reflector.setField(param0, "mFingerprintAuth", null);
            Reflector.setField(param0, "mConversationId", 0L);
            Reflector.setField(param0, "mBodyParams", null);
            Reflector.setField(param0, "mHelpdeskUrl", null);
            /* Act */
            retval = param0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }


    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getQueryParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            PostRatingRequester param2 = (PostRatingRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.PostRatingRequester");
            Reflector.setField(param2, "mFingerprintAuth", null);
            Reflector.setField(param2, "mConversationId", 0L);
            Reflector.setField(param2, "mBodyParams", null);
            Reflector.setField(param2, "mHelpdeskUrl", param1);
            /* Act */
            retval = param2.getQueryParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
