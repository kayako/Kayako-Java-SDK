package com.kayako.sdk.messenger.message;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.base.requester.AttachmentFile;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class PostMessageBodyParamsTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: PostMessageBodyParams */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 26 branch to line 30
     */
    @Test
    public void init() throws Throwable {
        PostMessageBodyParams instance;
        {
            /* Arrange */
            String param2 = "";
            String contents = param2;
            MessageSourceType type = null;
            String clientId = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new PostMessageBodyParams(contents, type, clientId);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init1() throws Throwable {
        PostMessageBodyParams instance;
        {
            /* Arrange */
            String contents = null;
            MessageSourceType type = null;
            String clientId = null;
            List<AttachmentFile> attachmentFileList = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new PostMessageBodyParams(contents, type, clientId, attachmentFileList);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 36 branch to line 40
     */
    @Test
    public void init2() throws Throwable {
        PostMessageBodyParams instance;
        {
            /* Arrange */
            String param2 = "";
            String contents = param2;
            MessageSourceType type = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new PostMessageBodyParams(contents, type);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 36 branch to line 37
     */
    @Test
    public void init3() throws Throwable {
        PostMessageBodyParams instance;
        {
            /* Arrange */
            String contents = null;
            MessageSourceType type = null;
            /* Act */
            /* Creating object to test constructor */
            thrown.expect(IllegalStateException.class);
            instance = new PostMessageBodyParams(contents, type);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 26 branch to line 27
     */
    @Test
    public void init4() throws Throwable {
        PostMessageBodyParams instance;
        {
            /* Arrange */
            String contents = null;
            MessageSourceType type = null;
            String clientId = null;
            /* Act */
            /* Creating object to test constructor */
            thrown.expect(IllegalStateException.class);
            instance = new PostMessageBodyParams(contents, type, clientId);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getAttachmentFileList() throws Throwable {
        List<AttachmentFile> retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            PostMessageBodyParams param4 = (PostMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message.PostMessageBodyParams");
            Reflector.setField(param4, "attachmentFileList", null);
            Reflector.setField(param4, "clientId", param1);
            Reflector.setField(param4, "type", null);
            Reflector.setField(param4, "contents", param3);
            /* Act */
            retval = param4.getAttachmentFileList();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getClientId() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            PostMessageBodyParams param2 = (PostMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message.PostMessageBodyParams");
            Reflector.setField(param2, "attachmentFileList", null);
            Reflector.setField(param2, "clientId", null);
            Reflector.setField(param2, "type", null);
            Reflector.setField(param2, "contents", param1);
            /* Act */
            retval = param2.getClientId();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getContents() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            PostMessageBodyParams param2 = (PostMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message.PostMessageBodyParams");
            Reflector.setField(param2, "attachmentFileList", null);
            Reflector.setField(param2, "clientId", param1);
            Reflector.setField(param2, "type", null);
            Reflector.setField(param2, "contents", null);
            /* Act */
            retval = param2.getContents();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getType() throws Throwable {
        MessageSourceType retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            PostMessageBodyParams param4 = (PostMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message.PostMessageBodyParams");
            Reflector.setField(param4, "attachmentFileList", null);
            Reflector.setField(param4, "clientId", param1);
            Reflector.setField(param4, "type", null);
            Reflector.setField(param4, "contents", param3);
            /* Act */
            retval = param4.getType();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
