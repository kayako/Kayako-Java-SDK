package com.kayako.sdk.messenger.conversation;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.helpcenter.user.UserMinimal;
import com.kayako.sdk.messenger.conversation.fields.ChannelType;
import com.kayako.sdk.messenger.conversation.fields.priority.Priority;
import com.kayako.sdk.messenger.conversation.fields.readmarker.ReadMarker;
import com.kayako.sdk.messenger.conversation.fields.status.Status;
import com.kayako.sdk.messenger.conversation.fields.team.Team;
import com.kayako.sdk.messenger.message.MessageStatus;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class ConversationTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: Conversation */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void init() throws Throwable {
        Conversation instance;
        {
            /* Arrange */
            Long id = null;
            String uuid = null;
            String legacyId = null;
            String subject = null;
            ChannelType channel = null;
            UserMinimal requester = null;
            UserMinimal creator = null;
            UserMinimal lastReplier = null;
            UserMinimal lastAgentReplier = null;
            Team assignedTeam = null;
            Status status = null;
            Boolean isClosed = null;
            ReadMarker readMarker = null;
            Priority priority = null;
            String realtimeChannel = null;
            Long lastRepliedAt = null;
            Long createdAt = null;
            Long updatedAt = null;
            String lastMessagePreview = null;
            MessageStatus lastMessageStatus = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new Conversation(id, uuid, legacyId, subject, channel, requester, creator, lastReplier, lastAgentReplier, assignedTeam, status, isClosed, readMarker, priority, realtimeChannel, lastRepliedAt, createdAt, updatedAt, lastMessagePreview, lastMessageStatus);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getAssignedTeam() throws Throwable {
        Team retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getAssignedTeam();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getChannel() throws Throwable {
        ChannelType retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Conversation param10 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param10, "updatedAt", null);
            Reflector.setField(param10, "createdAt", null);
            Reflector.setField(param10, "lastRepliedAt", null);
            Reflector.setField(param10, "lastMessagePreview", param1);
            Reflector.setField(param10, "priority", null);
            Reflector.setField(param10, "lastMessageStatus", null);
            Reflector.setField(param10, "uuid", param9);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "assignedTeam", null);
            Reflector.setField(param10, "status", null);
            Reflector.setField(param10, "subject", param5);
            Reflector.setField(param10, "channel", null);
            Reflector.setField(param10, "isClosed", null);
            Reflector.setField(param10, "legacyId", param7);
            Reflector.setField(param10, "requester", null);
            Reflector.setField(param10, "creator", null);
            Reflector.setField(param10, "readMarker", null);
            Reflector.setField(param10, "realtimeChannel", param3);
            Reflector.setField(param10, "lastAgentReplier", null);
            Reflector.setField(param10, "lastReplier", null);
            /* Act */
            retval = param10.getChannel();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getCreatedAt() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getCreatedAt();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getCreator() throws Throwable {
        UserMinimal retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getCreator();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getId() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getId();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }


    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLastAgentReplier() throws Throwable {
        UserMinimal retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getLastAgentReplier();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLastMessagePreview() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            ChannelType param2 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param2, "name", null);
            Reflector.setField(param2, "ordinal", 0);
            String param4 = "";
            String param6 = "";
            String param8 = "";
            Conversation param9 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param9, "updatedAt", null);
            Reflector.setField(param9, "createdAt", null);
            Reflector.setField(param9, "lastRepliedAt", null);
            Reflector.setField(param9, "lastMessagePreview", null);
            Reflector.setField(param9, "priority", null);
            Reflector.setField(param9, "lastMessageStatus", null);
            Reflector.setField(param9, "uuid", param8);
            Reflector.setField(param9, "id", null);
            Reflector.setField(param9, "assignedTeam", null);
            Reflector.setField(param9, "status", null);
            Reflector.setField(param9, "subject", param4);
            Reflector.setField(param9, "channel", param2);
            Reflector.setField(param9, "isClosed", null);
            Reflector.setField(param9, "legacyId", param6);
            Reflector.setField(param9, "requester", null);
            Reflector.setField(param9, "creator", null);
            Reflector.setField(param9, "readMarker", null);
            Reflector.setField(param9, "realtimeChannel", param1);
            Reflector.setField(param9, "lastAgentReplier", null);
            Reflector.setField(param9, "lastReplier", null);
            /* Act */
            retval = param9.getLastMessagePreview();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLastMessageStatus() throws Throwable {
        MessageStatus retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getLastMessageStatus();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLastRepliedAt() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Conversation param10 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param10, "updatedAt", null);
            Reflector.setField(param10, "createdAt", null);
            Reflector.setField(param10, "lastRepliedAt", null);
            Reflector.setField(param10, "lastMessagePreview", param1);
            Reflector.setField(param10, "priority", null);
            Reflector.setField(param10, "lastMessageStatus", null);
            Reflector.setField(param10, "uuid", param9);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "assignedTeam", null);
            Reflector.setField(param10, "status", null);
            Reflector.setField(param10, "subject", param5);
            Reflector.setField(param10, "channel", null);
            Reflector.setField(param10, "isClosed", null);
            Reflector.setField(param10, "legacyId", param7);
            Reflector.setField(param10, "requester", null);
            Reflector.setField(param10, "creator", null);
            Reflector.setField(param10, "readMarker", null);
            Reflector.setField(param10, "realtimeChannel", param3);
            Reflector.setField(param10, "lastAgentReplier", null);
            Reflector.setField(param10, "lastReplier", null);
            /* Act */
            retval = param10.getLastRepliedAt();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLastReplier() throws Throwable {
        UserMinimal retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getLastReplier();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLegacyId() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            Conversation param9 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param9, "updatedAt", null);
            Reflector.setField(param9, "createdAt", null);
            Reflector.setField(param9, "lastRepliedAt", null);
            Reflector.setField(param9, "lastMessagePreview", param1);
            Reflector.setField(param9, "priority", null);
            Reflector.setField(param9, "lastMessageStatus", null);
            Reflector.setField(param9, "uuid", param8);
            Reflector.setField(param9, "id", null);
            Reflector.setField(param9, "assignedTeam", null);
            Reflector.setField(param9, "status", null);
            Reflector.setField(param9, "subject", param6);
            Reflector.setField(param9, "channel", param4);
            Reflector.setField(param9, "isClosed", null);
            Reflector.setField(param9, "legacyId", null);
            Reflector.setField(param9, "requester", null);
            Reflector.setField(param9, "creator", null);
            Reflector.setField(param9, "readMarker", null);
            Reflector.setField(param9, "realtimeChannel", param3);
            Reflector.setField(param9, "lastAgentReplier", null);
            Reflector.setField(param9, "lastReplier", null);
            /* Act */
            retval = param9.getLegacyId();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getPriority() throws Throwable {
        Priority retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getPriority();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getReadMarker() throws Throwable {
        ReadMarker retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getReadMarker();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getRealtimeChannel() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            Conversation param8 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param8, "updatedAt", null);
            Reflector.setField(param8, "createdAt", null);
            Reflector.setField(param8, "lastRepliedAt", null);
            Reflector.setField(param8, "lastMessagePreview", param1);
            Reflector.setField(param8, "priority", null);
            Reflector.setField(param8, "lastMessageStatus", null);
            Reflector.setField(param8, "uuid", param7);
            Reflector.setField(param8, "id", null);
            Reflector.setField(param8, "assignedTeam", null);
            Reflector.setField(param8, "status", null);
            Reflector.setField(param8, "subject", param3);
            Reflector.setField(param8, "channel", null);
            Reflector.setField(param8, "isClosed", null);
            Reflector.setField(param8, "legacyId", param5);
            Reflector.setField(param8, "requester", null);
            Reflector.setField(param8, "creator", null);
            Reflector.setField(param8, "readMarker", null);
            Reflector.setField(param8, "realtimeChannel", null);
            Reflector.setField(param8, "lastAgentReplier", null);
            Reflector.setField(param8, "lastReplier", null);
            /* Act */
            retval = param8.getRealtimeChannel();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getRequester() throws Throwable {
        UserMinimal retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getRequester();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getStatus() throws Throwable {
        Status retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.getStatus();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getSubject() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            Conversation param9 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param9, "updatedAt", null);
            Reflector.setField(param9, "createdAt", null);
            Reflector.setField(param9, "lastRepliedAt", null);
            Reflector.setField(param9, "lastMessagePreview", param1);
            Reflector.setField(param9, "priority", null);
            Reflector.setField(param9, "lastMessageStatus", null);
            Reflector.setField(param9, "uuid", param8);
            Reflector.setField(param9, "id", null);
            Reflector.setField(param9, "assignedTeam", null);
            Reflector.setField(param9, "status", null);
            Reflector.setField(param9, "subject", null);
            Reflector.setField(param9, "channel", param4);
            Reflector.setField(param9, "isClosed", null);
            Reflector.setField(param9, "legacyId", param6);
            Reflector.setField(param9, "requester", null);
            Reflector.setField(param9, "creator", null);
            Reflector.setField(param9, "readMarker", null);
            Reflector.setField(param9, "realtimeChannel", param3);
            Reflector.setField(param9, "lastAgentReplier", null);
            Reflector.setField(param9, "lastReplier", null);
            /* Act */
            retval = param9.getSubject();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getUpdatedAt() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Conversation param10 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param10, "updatedAt", null);
            Reflector.setField(param10, "createdAt", null);
            Reflector.setField(param10, "lastRepliedAt", null);
            Reflector.setField(param10, "lastMessagePreview", param1);
            Reflector.setField(param10, "priority", null);
            Reflector.setField(param10, "lastMessageStatus", null);
            Reflector.setField(param10, "uuid", param9);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "assignedTeam", null);
            Reflector.setField(param10, "status", null);
            Reflector.setField(param10, "subject", param5);
            Reflector.setField(param10, "channel", null);
            Reflector.setField(param10, "isClosed", null);
            Reflector.setField(param10, "legacyId", param7);
            Reflector.setField(param10, "requester", null);
            Reflector.setField(param10, "creator", null);
            Reflector.setField(param10, "readMarker", null);
            Reflector.setField(param10, "realtimeChannel", param3);
            Reflector.setField(param10, "lastAgentReplier", null);
            Reflector.setField(param10, "lastReplier", null);
            /* Act */
            retval = param10.getUpdatedAt();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getUuid() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            Conversation param9 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param9, "updatedAt", null);
            Reflector.setField(param9, "createdAt", null);
            Reflector.setField(param9, "lastRepliedAt", null);
            Reflector.setField(param9, "lastMessagePreview", param1);
            Reflector.setField(param9, "priority", null);
            Reflector.setField(param9, "lastMessageStatus", null);
            Reflector.setField(param9, "uuid", null);
            Reflector.setField(param9, "id", null);
            Reflector.setField(param9, "assignedTeam", null);
            Reflector.setField(param9, "status", null);
            Reflector.setField(param9, "subject", param6);
            Reflector.setField(param9, "channel", param4);
            Reflector.setField(param9, "isClosed", null);
            Reflector.setField(param9, "legacyId", param8);
            Reflector.setField(param9, "requester", null);
            Reflector.setField(param9, "creator", null);
            Reflector.setField(param9, "readMarker", null);
            Reflector.setField(param9, "realtimeChannel", param3);
            Reflector.setField(param9, "lastAgentReplier", null);
            Reflector.setField(param9, "lastReplier", null);
            /* Act */
            retval = param9.getUuid();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void isClosed() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            ChannelType param4 = (ChannelType) Reflector.getInstance("com.kayako.sdk.messenger.conversation.fields.ChannelType");
            Reflector.setField(param4, "name", null);
            Reflector.setField(param4, "ordinal", 0);
            String param6 = "";
            String param8 = "";
            String param10 = "";
            Conversation param11 = (Conversation) Reflector.getInstance("com.kayako.sdk.messenger.conversation.Conversation");
            Reflector.setField(param11, "updatedAt", null);
            Reflector.setField(param11, "createdAt", null);
            Reflector.setField(param11, "lastRepliedAt", null);
            Reflector.setField(param11, "lastMessagePreview", param1);
            Reflector.setField(param11, "priority", null);
            Reflector.setField(param11, "lastMessageStatus", null);
            Reflector.setField(param11, "uuid", param10);
            Reflector.setField(param11, "id", null);
            Reflector.setField(param11, "assignedTeam", null);
            Reflector.setField(param11, "status", null);
            Reflector.setField(param11, "subject", param6);
            Reflector.setField(param11, "channel", param4);
            Reflector.setField(param11, "isClosed", null);
            Reflector.setField(param11, "legacyId", param8);
            Reflector.setField(param11, "requester", null);
            Reflector.setField(param11, "creator", null);
            Reflector.setField(param11, "readMarker", null);
            Reflector.setField(param11, "realtimeChannel", param3);
            Reflector.setField(param11, "lastAgentReplier", null);
            Reflector.setField(param11, "lastReplier", null);
            /* Act */
            retval = param11.isClosed();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
}
