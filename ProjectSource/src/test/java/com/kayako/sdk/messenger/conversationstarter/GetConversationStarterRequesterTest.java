package com.kayako.sdk.messenger.conversationstarter;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.auth.Auth;
import com.kayako.sdk.auth.FingerprintAuth;
import java.util.HashMap;
import java.util.Map;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class GetConversationStarterRequesterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: GetConversationStarterRequester */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        GetConversationStarterRequester instance;
        {
            /* Arrange */
            String param1 = "";
            String helpdeskUrl = param1;
            /* Act */
            /* Creating object to test constructor */
            instance = new GetConversationStarterRequester(helpdeskUrl);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init1() throws Throwable {
        GetConversationStarterRequester instance;
        {
            /* Arrange */
            String helpdeskUrl = null;
            Auth auth = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new GetConversationStarterRequester(helpdeskUrl, auth);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getEndpointUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            GetConversationStarterRequester param2 = (GetConversationStarterRequester) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.GetConversationStarterRequester");
            Reflector.setField(param2, "mAuth", null);
            Reflector.setField(param2, "mHelpdeskUrl", param1);
            /* Act */
            retval = param2.getEndpointUrl();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals("api/v1/conversations/starter", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 57 branch to line 60
     */
    @Test
    public void getHeaders() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetConversationStarterRequester param2 = (GetConversationStarterRequester) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.GetConversationStarterRequester");
            Reflector.setField(param2, "mAuth", null);
            Reflector.setField(param2, "mHelpdeskUrl", param1);
            /* Act */
            retval = param2.getHeaders();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 57 branch to line 58
     * conditional line 58 branch to line 58
     */
    @Test
    public void getHeaders1() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            FingerprintAuth param2 = (FingerprintAuth) Reflector.getInstance("com.kayako.sdk.auth.FingerprintAuth");
            param2.setFingerprintId(param1);
            String param4 = "";
            GetConversationStarterRequester param5 = (GetConversationStarterRequester) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.GetConversationStarterRequester");
            Reflector.setField(param5, "mAuth", param2);
            Reflector.setField(param5, "mHelpdeskUrl", param4);
            /* Act */
            retval = param5.getHeaders();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            HashMap hashMap = new HashMap();
            hashMap.put("X-Fingerprint-ID", "");
            assertEquals(hashMap, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHelpCenterUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            GetConversationStarterRequester param0 = (GetConversationStarterRequester) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.GetConversationStarterRequester");
            Reflector.setField(param0, "mAuth", null);
            Reflector.setField(param0, "mHelpdeskUrl", null);
            /* Act */
            retval = param0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getQueryParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetConversationStarterRequester param2 = (GetConversationStarterRequester) Reflector.getInstance("com.kayako.sdk.messenger.conversationstarter.GetConversationStarterRequester");
            Reflector.setField(param2, "mAuth", null);
            Reflector.setField(param2, "mHelpdeskUrl", param1);
            /* Act */
            retval = param2.getQueryParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
