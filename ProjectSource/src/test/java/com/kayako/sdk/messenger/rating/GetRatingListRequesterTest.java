package com.kayako.sdk.messenger.rating;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.auth.FingerprintAuth;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class GetRatingListRequesterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: GetRatingListRequester */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        GetRatingListRequester instance;
        {
            /* Arrange */
            String mHelpdeskUrl = null;
            FingerprintAuth mFingerprintAuth = null;
            long mConversationId = 0L;
            /* Act */
            /* Creating object to test constructor */
            instance = new GetRatingListRequester(mHelpdeskUrl, mFingerprintAuth, mConversationId);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHeaders() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            FingerprintAuth param0 = (FingerprintAuth) Reflector.getInstance("com.kayako.sdk.auth.FingerprintAuth");
            param0.setFingerprintId(null);
            String param2 = "";
            GetRatingListRequester param3 = (GetRatingListRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.GetRatingListRequester");
            Reflector.setField(param3, "mFingerprintAuth", param0);
            Reflector.setField(param3, "mConversationId", 0L);
            Reflector.setField(param3, "mHelpdeskUrl", param2);
            /* Act */
            retval = param3.getHeaders();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            HashMap hashMap = new HashMap();
            hashMap.put("X-Fingerprint-ID", null);
            assertEquals(hashMap, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHelpCenterUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            GetRatingListRequester param0 = (GetRatingListRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.GetRatingListRequester");
            Reflector.setField(param0, "mFingerprintAuth", null);
            Reflector.setField(param0, "mConversationId", 0L);
            Reflector.setField(param0, "mHelpdeskUrl", null);
            /* Act */
            retval = param0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getQueryParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetRatingListRequester param2 = (GetRatingListRequester) Reflector.getInstance("com.kayako.sdk.messenger.rating.GetRatingListRequester");
            Reflector.setField(param2, "mFingerprintAuth", null);
            Reflector.setField(param2, "mConversationId", 0L);
            Reflector.setField(param2, "mHelpdeskUrl", param1);
            /* Act */
            retval = param2.getQueryParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
