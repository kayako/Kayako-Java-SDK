package com.kayako.sdk.error.response;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class NotificationTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: Notification */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void init() throws Throwable {
        Notification instance;
        {
            /* Arrange */
            String type = null;
            String message = null;
            Boolean sticky = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new Notification(type, message, sticky);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getResponseMessageType() throws Throwable {
        Type retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            Notification param4 = (Notification) Reflector.getInstance("com.kayako.sdk.error.response.Notification");
            param4.sticky = null;
            ;
            param4.message = param1;
            ;
            param4.type = param3;
            ;
            /* Act */
            retval = param4.getResponseMessageType();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            assertEquals("NOTIFICATION", ((String) Reflector.getInstanceField(retval, "name")));
            assertEquals(1, Reflector.getInstanceField(retval, "ordinal"));
        }
    }
}
