package com.kayako.sdk.error;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.error.response.Error;
import com.kayako.sdk.error.response.Log;
import com.kayako.sdk.error.response.Notification;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class ResponseMessagesTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ResponseMessages */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        ResponseMessages instance;
        {
            /* Arrange */
            int statusCode = 0;
            List<Notification> notifications = null;
            List<Error> errors = null;
            List<Log> logs = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new ResponseMessages(statusCode, notifications, errors, logs);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 59 branch to line 60
     */
    @Test
    public void getErrors() throws Throwable {
        List<Error> retval;
        {
            /* Arrange */
            ResponseMessages param0 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param0.setErrors(null);
            param0.setLogs(null);
            param0.setNotifications(null);
            Reflector.setField(param0, "statusCode", 0);
            /* Act */
            retval = param0.getErrors();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            ArrayList arrayList = new ArrayList();
            assertEquals(arrayList, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 59 branch to line 62
     */
    @Test
    public void getErrors1() throws Throwable {
        List<Error> retval;
        {
            /* Arrange */
            Error[] dynamic_10_array = new Error[] {};
            Error[] param1 = dynamic_10_array;
            ArrayList param2 = new ArrayList();
            ResponseMessages param3 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param3.setErrors(param2);
            param3.setLogs(null);
            param3.setNotifications(null);
            Reflector.setField(param3, "statusCode", 0);
            /* Act */
            retval = param3.getErrors();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            ArrayList arrayList = new ArrayList();
            assertEquals(arrayList, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 76 branch to line 79
     */
    @Test
    public void getLogs() throws Throwable {
        List<Log> retval;
        {
            /* Arrange */
            Log[] dynamic_22_array = new Log[] {};
            Log[] param1 = dynamic_22_array;
            ArrayList param2 = new ArrayList();
            ResponseMessages param3 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param3.setErrors(null);
            param3.setLogs(param2);
            param3.setNotifications(null);
            Reflector.setField(param3, "statusCode", 0);
            /* Act */
            retval = param3.getLogs();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            ArrayList arrayList = new ArrayList();
            assertEquals(arrayList, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 76 branch to line 77
     */
    @Test
    public void getLogs1() throws Throwable {
        List<Log> retval;
        {
            /* Arrange */
            ResponseMessages param0 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param0.setErrors(null);
            param0.setLogs(null);
            param0.setNotifications(null);
            Reflector.setField(param0, "statusCode", 0);
            /* Act */
            retval = param0.getLogs();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            ArrayList arrayList = new ArrayList();
            assertEquals(arrayList, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 42 branch to line 45
     */
    @Test
    public void getNotifications() throws Throwable {
        List<Notification> retval;
        {
            /* Arrange */
            Notification[] dynamic_2_array = new Notification[] {};
            Notification[] param1 = dynamic_2_array;
            ArrayList param2 = new ArrayList();
            ResponseMessages param3 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param3.setErrors(null);
            param3.setLogs(null);
            param3.setNotifications(param2);
            Reflector.setField(param3, "statusCode", 0);
            /* Act */
            retval = param3.getNotifications();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            ArrayList arrayList = new ArrayList();
            assertEquals(arrayList, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 42 branch to line 43
     */
    @Test
    public void getNotifications1() throws Throwable {
        List<Notification> retval;
        {
            /* Arrange */
            ResponseMessages param0 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param0.setErrors(null);
            param0.setLogs(null);
            param0.setNotifications(null);
            Reflector.setField(param0, "statusCode", 0);
            /* Act */
            retval = param0.getNotifications();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            ArrayList arrayList = new ArrayList();
            assertEquals(arrayList, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getStatusCode() throws Throwable {
        int retval;
        {
            /* Arrange */
            ResponseMessages param0 = (ResponseMessages) Reflector.getInstance("com.kayako.sdk.error.ResponseMessages");
            param0.setErrors(null);
            param0.setLogs(null);
            param0.setNotifications(null);
            Reflector.setField(param0, "statusCode", 0);
            /* Act */
            retval = param0.getStatusCode();
        }
        {
            /* Assert result */
            assertEquals(0, retval);
        }
    }
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
}
