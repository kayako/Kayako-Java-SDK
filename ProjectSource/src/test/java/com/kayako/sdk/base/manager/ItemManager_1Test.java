package com.kayako.sdk.base.manager;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.base.callback.ItemCallback;
import com.kayako.sdk.base.parser.ItemParser;
import com.kayako.sdk.base.requester.Requester;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class ItemManager_1Test {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ItemManager_1 */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerItemManager$1init() throws Throwable {
        Object instance;
        {
            /* Arrange */
            ItemManager arg1a = null;
            ItemCallback arg2a = null;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.base.manager.ItemManager$1");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.kayako.sdk.base.manager.ItemManager"), Reflector.forName("com.kayako.sdk.base.callback.ItemCallback"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(arg1a, arg2a);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerItemManagerinit() throws Throwable {
        ItemManager instance;
        {
            /* Arrange */
            Requester requester = null;
            ItemParser parser = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new ItemManager(requester, parser);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerItemManageraccess$() throws Throwable {
        ItemParser retval;
        {
            /* Arrange */
            ItemManager param0 = (ItemManager) Reflector.getInstance("com.kayako.sdk.base.manager.ItemManager");
            Reflector.setField(param0, "parser", null);
            Reflector.setField(param0, "requester", null);
            ItemManager x0 = param0;
            /* Act */
            Class<?> c = Reflector.forName("com.kayako.sdk.base.manager.ItemManager");
            Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.kayako.sdk.base.manager.ItemManager"));
            m.setAccessible(true);
            retval = (ItemParser) m.invoke(null, x0);
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
