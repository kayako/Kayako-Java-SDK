package com.kayako.sdk.base.manager;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

public class ListManager_1Test {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ListManager_1 */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_base_manager_ListManager_access$000_000_49a4331238746d42() throws Throwable {
        com.kayako.sdk.base.parser.ListParser retval;
        {
            /* Arrange */
            ListManager param_0 = (ListManager) Reflector.getInstance("com.kayako.sdk.base.manager.ListManager");
            Reflector.setField(param_0, "parser", null);
            Reflector.setField(param_0, "requester", null);
            ListManager x0 = param_0;
            /* Act */
            Class<?> c = Reflector.forName("com.kayako.sdk.base.manager.ListManager");
            Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.kayako.sdk.base.manager.ListManager"));
            m.setAccessible(true);
            retval = (com.kayako.sdk.base.parser.ListParser) m.invoke(null, x0);
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }
}
