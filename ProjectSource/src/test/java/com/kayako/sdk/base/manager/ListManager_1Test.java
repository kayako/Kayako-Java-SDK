package com.kayako.sdk.base.manager;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.base.callback.ListCallback;
import com.kayako.sdk.base.parser.ListParser;
import com.kayako.sdk.base.requester.Requester;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class ListManager_1Test {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ListManager_1 */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerListManager$1init() throws Throwable {
        Object instance;
        {
            /* Arrange */
            ListManager arg1a = null;
            ListCallback arg2a = null;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.base.manager.ListManager$1");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.kayako.sdk.base.manager.ListManager"), Reflector.forName("com.kayako.sdk.base.callback.ListCallback"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(arg1a, arg2a);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 98 branch to line 98
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerListManager$2init() throws Throwable {
        Object instance;
        {
            /* Arrange */
            ListManager arg1a = null;
            com.kayako.sdk.helpcenter.base.ListCallback arg2a = null;
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.base.manager.ListManager$2");
            Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.kayako.sdk.base.manager.ListManager"), Reflector.forName("com.kayako.sdk.helpcenter.base.ListCallback"));
            ctor.setAccessible(true);
            instance = ctor.newInstance(arg1a, arg2a);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerListManagerinit() throws Throwable {
        ListManager instance;
        {
            /* Arrange */
            Requester requester = null;
            ListParser parser = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new ListManager(requester, parser);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void comkayakosdkbasemanagerListManageraccess$() throws Throwable {
        ListParser retval;
        {
            /* Arrange */
            ListManager param0 = (ListManager) Reflector.getInstance("com.kayako.sdk.base.manager.ListManager");
            Reflector.setField(param0, "parser", null);
            Reflector.setField(param0, "requester", null);
            ListManager x0 = param0;
            /* Act */
            Class<?> c = Reflector.forName("com.kayako.sdk.base.manager.ListManager");
            Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.kayako.sdk.base.manager.ListManager"));
            m.setAccessible(true);
            retval = (ListParser) m.invoke(null, x0);
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
