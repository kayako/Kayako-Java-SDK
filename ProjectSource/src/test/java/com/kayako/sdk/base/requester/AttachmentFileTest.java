package com.kayako.sdk.base.requester;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.File;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class AttachmentFileTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: AttachmentFile */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 16 branch to line 19
     */
    @Test
    public void init() throws Throwable {
        AttachmentFile instance;
        {
            /* Arrange */
            File param1 = (File) Reflector.getInstance("java.io.File");
            Reflector.setField(param1, "filePath", null);
            Reflector.setField(param1, "prefixLength", 0);
            Reflector.setField(param1, "path", null);
            File file = param1;
            String contentType = null;
            String fileName = null;
            /* Act */
            /* Creating object to test constructor */
            instance = new AttachmentFile(file, contentType, fileName);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 16 branch to line 17
     */
    @Test
    public void init1() throws Throwable {
        AttachmentFile instance;
        {
            /* Arrange */
            File file = null;
            String contentType = null;
            String fileName = null;
            /* Act */
            /* Creating object to test constructor */
            thrown.expect(IllegalArgumentException.class);
            instance = new AttachmentFile(file, contentType, fileName);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getContentType() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            AttachmentFile param2 = (AttachmentFile) Reflector.getInstance("com.kayako.sdk.base.requester.AttachmentFile");
            Reflector.setField(param2, "file", null);
            Reflector.setField(param2, "contentType", null);
            Reflector.setField(param2, "fileName", param1);
            /* Act */
            retval = param2.getContentType();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getFileName() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            AttachmentFile param2 = (AttachmentFile) Reflector.getInstance("com.kayako.sdk.base.requester.AttachmentFile");
            Reflector.setField(param2, "file", null);
            Reflector.setField(param2, "contentType", param1);
            Reflector.setField(param2, "fileName", null);
            /* Act */
            retval = param2.getFileName();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getFile() throws Throwable {
        File retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            AttachmentFile param4 = (AttachmentFile) Reflector.getInstance("com.kayako.sdk.base.requester.AttachmentFile");
            Reflector.setField(param4, "file", null);
            Reflector.setField(param4, "contentType", param1);
            Reflector.setField(param4, "fileName", param3);
            /* Act */
            retval = param4.getFile();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
