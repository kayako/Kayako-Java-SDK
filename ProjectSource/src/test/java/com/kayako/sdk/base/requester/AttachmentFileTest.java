package com.kayako.sdk.base.requester;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class AttachmentFileTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: AttachmentFile */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 16 branch to line 19
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 16 branch to line 17
     */
    @Test
    public void com_kayako_sdk_base_requester_AttachmentFile__init__001_272852a12bf3a62c() throws Throwable {
        AttachmentFile instance;
        {
            /* Arrange */
            java.io.File file = null;
            String contentType = null;
            String fileName = null;
            /* Act */
            /* Creating object to test constructor */
            thrown.expect(IllegalArgumentException.class);
            instance = new AttachmentFile(file, contentType, fileName);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_base_requester_AttachmentFile_getContentType_000_af3a95c96926e482() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            AttachmentFile param_2 = (AttachmentFile) Reflector.getInstance("com.kayako.sdk.base.requester.AttachmentFile");
            Reflector.setField(param_2, "file", null);
            Reflector.setField(param_2, "contentType", null);
            Reflector.setField(param_2, "fileName", param_1);
            /* Act */
            retval = param_2.getContentType();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_base_requester_AttachmentFile_getFileName_000_b30155d53dbd2d2() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            AttachmentFile param_2 = (AttachmentFile) Reflector.getInstance("com.kayako.sdk.base.requester.AttachmentFile");
            Reflector.setField(param_2, "file", null);
            Reflector.setField(param_2, "contentType", param_1);
            Reflector.setField(param_2, "fileName", null);
            /* Act */
            retval = param_2.getFileName();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_base_requester_AttachmentFile_getFile_000_600b037f3de0aa05() throws Throwable {
        java.io.File retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            AttachmentFile param_4 = (AttachmentFile) Reflector.getInstance("com.kayako.sdk.base.requester.AttachmentFile");
            Reflector.setField(param_4, "file", null);
            Reflector.setField(param_4, "contentType", param_1);
            Reflector.setField(param_4, "fileName", param_3);
            /* Act */
            retval = param_4.getFile();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }
}
