package com.kayako.sdk.utils;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.error.ErrorCode;
import com.kayako.sdk.error.KayakoException;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class ExceptionUtils_1Test {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ExceptionUtils_1 */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     */
    @Test
    public void $1clinit() throws Throwable {
        Object constructed;
        {
            /* Act */
            /* Using constructor to test static initializer */
            constructed = Reflector.getInstance("com.kayako.sdk.utils.ExceptionUtils$1");
            assertNotNull(constructed);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        ExceptionUtils instance;
        {
            /* Act */
            /* Creating object to test constructor */
            instance = new ExceptionUtils();
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 60
     * conditional line 60 branch to line 63
     */
    @Test
    public void generateErrorCode() throws Throwable {
        ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 110;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            assertEquals("OTHER", ((String) Reflector.getInstanceField(retval, "name")));
            assertEquals(5, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 58
     * conditional line 58 branch to line 60
     * conditional line 60 branch to line 60
     * conditional line 60 branch to line 63
     */
    @Test
    public void generateErrorCode1() throws Throwable {
        ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 65902;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            assertEquals("OTHER", ((String) Reflector.getInstanceField(retval, "name")));
            assertEquals(5, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 57
     */
    @Test
    public void generateErrorCode2() throws Throwable {
        ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 398;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            assertEquals("EXTERNAL_REDIRECTION_ERROR", ((String) Reflector.getInstanceField(retval, "name")));
            assertEquals(0, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 58
     * conditional line 58 branch to line 59
     */
    @Test
    public void generateErrorCode3() throws Throwable {
        ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 401;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            assertEquals("EXTERNAL_CLIENT_ERROR", ((String) Reflector.getInstanceField(retval, "name")));
            assertEquals(1, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 58
     * conditional line 58 branch to line 60
     * conditional line 60 branch to line 60
     * conditional line 60 branch to line 61
     */
    @Test
    public void generateErrorCode4() throws Throwable {
        ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 507;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            assertEquals("EXTERNAL_SERVER_ERROR", ((String) Reflector.getInstanceField(retval, "name")));
            assertEquals(2, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 5 of switch on line 68
     */
    @Test
    public void generateErrorMessage() throws Throwable {
        String retval;
        {
            /* Arrange */
            ErrorCode param0 = (ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 2);
            ErrorCode errorCode = param0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals("Network Error", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 6 of switch on line 68
     */
    @Test
    public void generateErrorMessage1() throws Throwable {
        String retval;
        {
            /* Arrange */
            ErrorCode param0 = (ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 5);
            ErrorCode errorCode = param0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals("Failed to make request", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 1 of switch on line 68
     */
    @Test
    public void generateErrorMessage2() throws Throwable {
        String retval;
        {
            /* Arrange */
            ErrorCode param0 = (ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 3);
            ErrorCode errorCode = param0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals("Unable to connect to server", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 2 of switch on line 68
     */
    @Test
    public void generateErrorMessage3() throws Throwable {
        String retval;
        {
            /* Arrange */
            ErrorCode param0 = (ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 4);
            ErrorCode errorCode = param0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals("Unable to parse response", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 21 branch to line 21
     */
    @Test
    public void generateInternalKayakoException() throws Throwable {
        KayakoException retval;
        {
            /* Arrange */
            String param4 = "";
            ErrorCode param3 = (ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param3, "name", param4);
            Reflector.setField(param3, "ordinal", 6);
            ErrorCode errorCode = param3;
            Throwable param0 = new Throwable();
            Reflector.setField(param0, "suppressedExceptions", null);
            Reflector.setField(param0, "stackTrace", null);
            Reflector.setField(param0, "cause", null);
            Reflector.setField(param0, "detailMessage", null);
            Throwable throwable = param0;
            /* Act */
            thrown.expect(ArrayIndexOutOfBoundsException.class);
            retval = ExceptionUtils.generateInternalKayakoException(errorCode, throwable);
            assertNotNull(retval);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 21 branch to line 21
     */
    @Test
    public void generateInternalKayakoException1() throws Throwable {
        KayakoException retval;
        {
            /* Arrange */
            String param4 = "";
            ErrorCode param3 = (ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param3, "name", param4);
            Reflector.setField(param3, "ordinal", 4);
            ErrorCode errorCode = param3;
            Throwable param0 = new Throwable();
            Reflector.setField(param0, "suppressedExceptions", null);
            Reflector.setField(param0, "stackTrace", null);
            Reflector.setField(param0, "cause", null);
            Reflector.setField(param0, "detailMessage", null);
            Throwable throwable = param0;
            /* Act */
            retval = ExceptionUtils.generateInternalKayakoException(errorCode, throwable);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(((String) Reflector.getInstanceField(retval, "detailMessage")));
            assertEquals("Unable to parse response", ((String) Reflector.getInstanceField(retval, "detailMessage")));
            assertNotNull(Reflector.getInstanceField(retval, "cause"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "cause"), "detailMessage")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "cause"), "cause"));
            assertEquals(null, ((StackTraceElement[]) Reflector.getInstanceField(Reflector.getInstanceField(retval, "cause"), "stackTrace")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "cause"), "suppressedExceptions"));
            assertNotNull(((StackTraceElement[]) Reflector.getInstanceField(retval, "stackTrace")));
            assertEquals(0, ((StackTraceElement[]) Reflector.getInstanceField(retval, "stackTrace")).length);
            assertNotNull(((String) Reflector.getInstanceField(retval, "message")));
            assertEquals("Unable to parse response", ((String) Reflector.getInstanceField(retval, "message")));
            assertNotNull(Reflector.getInstanceField(retval, "code"));
            assertNotNull(((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "code"), "name")));
            assertEquals("", ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "code"), "name")));
            assertEquals(4, Reflector.getInstanceField(Reflector.getInstanceField(retval, "code"), "ordinal"));
            assertEquals(null, Reflector.getInstanceField(retval, "responseMessages"));
            assertNotNull(Reflector.getInstanceField(retval, "throwable"));
            assertEquals(Reflector.getInstanceField(retval, "cause"), Reflector.getInstanceField(retval, "throwable"));
        }
    }
}
