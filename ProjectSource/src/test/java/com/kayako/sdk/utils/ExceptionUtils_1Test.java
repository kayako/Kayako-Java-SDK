package com.kayako.sdk.utils;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class ExceptionUtils_1Test {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ExceptionUtils_1 */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 60
     * conditional line 60 branch to line 63
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorCode_000_71b3c7d13aaba56e() throws Throwable {
        com.kayako.sdk.error.ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 110;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals("OTHER", ((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals(5, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 58
     * conditional line 58 branch to line 60
     * conditional line 60 branch to line 60
     * conditional line 60 branch to line 63
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorCode_001_df72d7b1ee491049() throws Throwable {
        com.kayako.sdk.error.ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 65902;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals("OTHER", ((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals(5, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 57
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorCode_002_1274c3fec8d5b464() throws Throwable {
        com.kayako.sdk.error.ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 398;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals("EXTERNAL_REDIRECTION_ERROR", ((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals(0, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 58
     * conditional line 58 branch to line 59
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorCode_003_421f098668b157a5() throws Throwable {
        com.kayako.sdk.error.ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 401;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals("EXTERNAL_CLIENT_ERROR", ((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals(1, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 56 branch to line 56
     * conditional line 56 branch to line 58
     * conditional line 58 branch to line 58
     * conditional line 58 branch to line 60
     * conditional line 60 branch to line 60
     * conditional line 60 branch to line 61
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorCode_004_e00d8d1581f709ad() throws Throwable {
        com.kayako.sdk.error.ErrorCode retval;
        {
            /* Arrange */
            int statusCode = 507;
            /* Act */
            retval = ExceptionUtils.generateErrorCode(statusCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals("EXTERNAL_SERVER_ERROR", ((String) Reflector.getInstanceField(retval, "name")));
            Assert.assertEquals(2, Reflector.getInstanceField(retval, "ordinal"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 5 of switch on line 68
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorMessage_000_1112ce6bdda11c92() throws Throwable {
        String retval;
        {
            /* Arrange */
            com.kayako.sdk.error.ErrorCode param_0 = (com.kayako.sdk.error.ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param_0, "name", null);
            Reflector.setField(param_0, "ordinal", 2);
            com.kayako.sdk.error.ErrorCode errorCode = param_0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertEquals("Network Error", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 6 of switch on line 68
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorMessage_001_1a0a187c7b30a5b4() throws Throwable {
        String retval;
        {
            /* Arrange */
            com.kayako.sdk.error.ErrorCode param_0 = (com.kayako.sdk.error.ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param_0, "name", null);
            Reflector.setField(param_0, "ordinal", 5);
            com.kayako.sdk.error.ErrorCode errorCode = param_0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertEquals("Failed to make request", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 1 of switch on line 68
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorMessage_002_c58c9ffc6ca12595() throws Throwable {
        String retval;
        {
            /* Arrange */
            com.kayako.sdk.error.ErrorCode param_0 = (com.kayako.sdk.error.ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param_0, "name", null);
            Reflector.setField(param_0, "ordinal", 3);
            com.kayako.sdk.error.ErrorCode errorCode = param_0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertEquals("Unable to connect to server", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 68 branch to line 68
     * case 2 of switch on line 68
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateErrorMessage_003_3af1f036c5f2179c() throws Throwable {
        String retval;
        {
            /* Arrange */
            com.kayako.sdk.error.ErrorCode param_0 = (com.kayako.sdk.error.ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param_0, "name", null);
            Reflector.setField(param_0, "ordinal", 4);
            com.kayako.sdk.error.ErrorCode errorCode = param_0;
            /* Act */
            retval = ExceptionUtils.generateErrorMessage(errorCode);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertEquals("Unable to parse response", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 21 branch to line 21
     */
    @Test
    public void com_kayako_sdk_utils_ExceptionUtils_generateInternalKayakoException_000_f62943fb7d1b33fe() throws Throwable {
        com.kayako.sdk.error.KayakoException retval;
        {
            /* Arrange */
            String param_4 = "";
            com.kayako.sdk.error.ErrorCode param_3 = (com.kayako.sdk.error.ErrorCode) Reflector.getInstance("com.kayako.sdk.error.ErrorCode");
            Reflector.setField(param_3, "name", param_4);
            Reflector.setField(param_3, "ordinal", 6);
            com.kayako.sdk.error.ErrorCode errorCode = param_3;
            Throwable param_0 = (Throwable) Reflector.getInstance("java.lang.Throwable");
            Reflector.setField(param_0, "suppressedExceptions", null);
            Reflector.setField(param_0, "stackTrace", null);
            Reflector.setField(param_0, "cause", null);
            Reflector.setField(param_0, "detailMessage", null);
            Throwable throwable = param_0;
            /* Act */
            thrown.expect(ArrayIndexOutOfBoundsException.class);
            retval = ExceptionUtils.generateInternalKayakoException(errorCode, throwable);
        /* Method return type is void, or not expected to return */
        }
    }
}
