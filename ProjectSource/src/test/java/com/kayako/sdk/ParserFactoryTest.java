package com.kayako.sdk;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.base.parser.ItemParser;
import com.kayako.sdk.base.parser.ListParser;
import com.kayako.sdk.base.parser.Parser;
import com.kayako.sdk.error.response.Error;
import com.kayako.sdk.error.response.Log;
import com.kayako.sdk.error.response.Notification;
import com.kayako.sdk.helpcenter.articles.Article;
import com.kayako.sdk.helpcenter.category.Category;
import com.kayako.sdk.helpcenter.search.SearchArticle;
import com.kayako.sdk.helpcenter.section.Section;
import com.kayako.sdk.helpcenter.user.UserMinimal;
import com.kayako.sdk.messenger.attachment.Attachment;
import com.kayako.sdk.messenger.attachment.Thumbnail;
import com.kayako.sdk.messenger.conversation.Conversation;
import com.kayako.sdk.messenger.conversation.fields.priority.Priority;
import com.kayako.sdk.messenger.conversation.fields.readmarker.ReadMarker;
import com.kayako.sdk.messenger.conversation.fields.status.Status;
import com.kayako.sdk.messenger.conversation.fields.team.Team;
import com.kayako.sdk.messenger.conversationstarter.ConversationStarter;
import com.kayako.sdk.messenger.message.Message;
import com.kayako.sdk.messenger.rating.Rating;
import java.util.Locale;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class ParserFactoryTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: ParserFactory */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        ParserFactory instance;
        {
            /* Act */
            /* Creating object to test constructor */
            instance = new ParserFactory();
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getArticleItemParser() throws Throwable {
        ItemParser<Article> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getArticleItemParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getArticleListParser() throws Throwable {
        ListParser<Article> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getArticleListParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getArticleParser() throws Throwable {
        Parser<Article> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getArticleParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals(null, Reflector.getInstanceField(retval, "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getAttachmentParser() throws Throwable {
        Parser<Attachment> retval;
        {
            /* Act */
            retval = ParserFactory.getAttachmentParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getCategoryItemParser() throws Throwable {
        ItemParser<Category> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getCategoryItemParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getCategoryListParser() throws Throwable {
        ListParser<Category> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getCategoryListParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getCategoryParser() throws Throwable {
        Parser<Category> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getCategoryParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals(null, Reflector.getInstanceField(retval, "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationItemParser() throws Throwable {
        ItemParser<Conversation> retval;
        {
            /* Act */
            retval = ParserFactory.getConversationItemParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationListParser() throws Throwable {
        ListParser<Conversation> retval;
        {
            /* Act */
            retval = ParserFactory.getConversationListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationParser() throws Throwable {
        Parser<Conversation> retval;
        {
            /* Act */
            retval = ParserFactory.getConversationParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationStarterItemParser() throws Throwable {
        ItemParser<ConversationStarter> retval;
        {
            /* Act */
            retval = ParserFactory.getConversationStarterItemParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationStarterParser() throws Throwable {
        Parser<ConversationStarter> retval;
        {
            /* Act */
            retval = ParserFactory.getConversationStarterParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getErrorListParser() throws Throwable {
        ListParser<Error> retval;
        {
            /* Act */
            retval = ParserFactory.getErrorListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getErrorParser() throws Throwable {
        Parser<Error> retval;
        {
            /* Act */
            retval = ParserFactory.getErrorParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getItemRatingParser() throws Throwable {
        ItemParser<Rating> retval;
        {
            /* Act */
            retval = ParserFactory.getItemRatingParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLocaleItemParser() throws Throwable {
        ItemParser<com.kayako.sdk.helpcenter.locale.Locale> retval;
        {
            /* Act */
            retval = ParserFactory.getLocaleItemParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLocaleListParser() throws Throwable {
        ListParser<com.kayako.sdk.helpcenter.locale.Locale> retval;
        {
            /* Act */
            retval = ParserFactory.getLocaleListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLocaleParser() throws Throwable {
        Parser<com.kayako.sdk.helpcenter.locale.Locale> retval;
        {
            /* Act */
            retval = ParserFactory.getLocaleParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLogListParser() throws Throwable {
        ListParser<Log> retval;
        {
            /* Act */
            retval = ParserFactory.getLogListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLogParser() throws Throwable {
        Parser<Log> retval;
        {
            /* Act */
            retval = ParserFactory.getLogParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getMessageItemParser() throws Throwable {
        ItemParser<Message> retval;
        {
            /* Act */
            retval = ParserFactory.getMessageItemParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getMessageListParser() throws Throwable {
        ListParser<Message> retval;
        {
            /* Act */
            retval = ParserFactory.getMessageListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getMessageParser() throws Throwable {
        Parser<Message> retval;
        {
            /* Act */
            retval = ParserFactory.getMessageParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getNotificationListParser() throws Throwable {
        ListParser<Notification> retval;
        {
            /* Act */
            retval = ParserFactory.getNotificationListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getNotificationParser() throws Throwable {
        Parser<Notification> retval;
        {
            /* Act */
            retval = ParserFactory.getNotificationParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getPriorityParser() throws Throwable {
        Parser<Priority> retval;
        {
            /* Act */
            retval = ParserFactory.getPriorityParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getRatingListParser() throws Throwable {
        ListParser<Rating> retval;
        {
            /* Act */
            retval = ParserFactory.getRatingListParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getRatingParser() throws Throwable {
        Parser<Rating> retval;
        {
            /* Act */
            retval = ParserFactory.getRatingParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getReadMarkerParser() throws Throwable {
        Parser<ReadMarker> retval;
        {
            /* Act */
            retval = ParserFactory.getReadMarkerParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSearchArticleListParser() throws Throwable {
        ListParser<SearchArticle> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getSearchArticleListParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSearchArticleParser() throws Throwable {
        Parser<SearchArticle> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getSearchArticleParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals(null, Reflector.getInstanceField(retval, "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSectionItemParser() throws Throwable {
        ItemParser<Section> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getSectionItemParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSectionListParser() throws Throwable {
        ListParser<Section> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getSectionListParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mParser"));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mParser"), "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSectionParser() throws Throwable {
        Parser<Section> retval;
        {
            /* Arrange */
            Locale locale = null;
            /* Act */
            retval = ParserFactory.getSectionParser(locale);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals(null, Reflector.getInstanceField(retval, "mLocale"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getStatusParser() throws Throwable {
        Parser<Status> retval;
        {
            /* Act */
            retval = ParserFactory.getStatusParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getTeamParser() throws Throwable {
        Parser<Team> retval;
        {
            /* Act */
            retval = ParserFactory.getTeamParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getThumbnailParser() throws Throwable {
        Parser<Thumbnail> retval;
        {
            /* Act */
            retval = ParserFactory.getThumbnailParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getUserMinimalParser() throws Throwable {
        Parser<UserMinimal> retval;
        {
            /* Act */
            retval = ParserFactory.getUserMinimalParser();
        }
        {
            /* Assert result */
            assertNotNull(retval);
        }
    }
}
