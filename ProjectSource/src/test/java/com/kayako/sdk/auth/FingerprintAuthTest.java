package com.kayako.sdk.auth;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class FingerprintAuthTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: FingerprintAuth */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_auth_FingerprintAuth_getFingerprintId_000_236c04f741cac931() throws Throwable {
        String retval;
        {
            /* Arrange */
            FingerprintAuth param_0 = (FingerprintAuth) Reflector.getInstance("com.kayako.sdk.auth.FingerprintAuth");
            Reflector.setField(param_0, "fingerprintId", null);
            /* Act */
            retval = param_0.getFingerprintId();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 31 branch to line 31
     */
    @Test
    public void com_kayako_sdk_auth_FingerprintAuth_getHeaders_000_ac5b1ff7aac564ae() throws Throwable {
        java.util.Map<String, String> retval;
        {
            /* Arrange */
            String param_1 = "";
            FingerprintAuth param_2 = (FingerprintAuth) Reflector.getInstance("com.kayako.sdk.auth.FingerprintAuth");
            Reflector.setField(param_2, "fingerprintId", param_1);
            /* Act */
            retval = param_2.getHeaders();
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            java.util.HashMap hashMap = new java.util.HashMap();
            hashMap.put("X-Fingerprint-ID", "");
            Assert.assertEquals(hashMap, retval);
        }
    }
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
}
