package com.kayako.sdk;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class RequesterFactoryTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: RequesterFactory */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getArticleItemRequester_000_f60b3ee4a71f259f() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long articleId = 0L;
            /* Act */
            retval = RequesterFactory.getArticleItemRequester(helpCenterUrl, articleId);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mArticleId"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getCategoryItemRequester_000_5973271817235800() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long categoryId = 0L;
            /* Act */
            retval = RequesterFactory.getCategoryItemRequester(helpCenterUrl, categoryId);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpDeskUrl")));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mCategoryId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getConversationItemRequester_000_56cf715491974a8d() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            com.kayako.sdk.auth.FingerprintAuth auth = null;
            long conversationId = 0L;
            /* Act */
            retval = RequesterFactory.getConversationItemRequester(helpCenterUrl, auth, conversationId);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            Assert.assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"), "value"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getConversationListRequester_000_77ce61446b4f6290() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            com.kayako.sdk.auth.FingerprintAuth auth = null;
            int offset = 0;
            int limit = 0;
            /* Act */
            retval = RequesterFactory.getConversationListRequester(helpCenterUrl, auth, offset, limit);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            Assert.assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mQueryParameters"));
            java.util.HashMap hashMap = new java.util.HashMap();
            hashMap.put("offset", "0");
            hashMap.put("limit", "0");
            Assert.assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mQueryParameters"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getConversationStarterItemRequester_000_2d8735b6d8413816() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            com.kayako.sdk.auth.FingerprintAuth fingerprintAuth = null;
            /* Act */
            retval = RequesterFactory.getConversationStarterItemRequester(helpDeskUrl, fingerprintAuth);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mAuth"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getLocaleItemRequester_000_6b4258c1da8b23e4() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long localeId = 0L;
            /* Act */
            retval = RequesterFactory.getLocaleItemRequester(helpCenterUrl, localeId);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mLocaleId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getLocaleListRequester_000_57d8c2416e846a23() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            /* Act */
            retval = RequesterFactory.getLocaleListRequester(helpCenterUrl);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getRatingListRequester_000_23933a24c36fd3b0() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            com.kayako.sdk.auth.FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            /* Act */
            retval = RequesterFactory.getRatingListRequester(helpDeskUrl, fingerprintAuth, conversationId);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_getSectionItemRequester_000_9e8a47c07a10e681() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long sectionId = 0L;
            /* Act */
            retval = RequesterFactory.getSectionItemRequester(helpCenterUrl, sectionId);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mSectionId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_putMessageItemRequester_000_246ac940e68537be() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            com.kayako.sdk.auth.FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            long messageId = 0L;
            Object param_0 = Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageBodyParams$MessageStatus");
            Reflector.setField(param_0, "name", null);
            Reflector.setField(param_0, "ordinal", 0);
            com.kayako.sdk.messenger.message.PutMessageBodyParams param_1 = (com.kayako.sdk.messenger.message.PutMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message" + ".PutMessageBodyParams");
            Reflector.setField(param_1, "messageStatus", param_0);
            com.kayako.sdk.messenger.message.PutMessageBodyParams putMessageBodyParams = param_1;
            /* Act */
            retval = RequesterFactory.putMessageItemRequester(helpCenterUrl, fingerprintAuth, conversationId, messageId, putMessageBodyParams);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mMessageId"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
            Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            Assert.assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            java.util.HashMap hashMap = new java.util.HashMap();
            hashMap.put("message_status", null);
            Assert.assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_RequesterFactory_putRatingRequester_000_7eee7bee9440b7f4() throws Throwable {
        com.kayako.sdk.base.requester.Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            com.kayako.sdk.auth.FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            long ratingId = 0L;
            Object param_0 = Reflector.getInstance("com.kayako.sdk.messenger.rating.Rating$SCORE");
            Reflector.setField(param_0, "name", null);
            Reflector.setField(param_0, "ordinal", 0);
            com.kayako.sdk.messenger.rating.PutRatingBodyParams param_1 = (com.kayako.sdk.messenger.rating.PutRatingBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.rating.PutRatingBodyParams");
            Reflector.setField(param_1, "score", param_0);
            Reflector.setField(param_1, "comment", null);
            com.kayako.sdk.messenger.rating.PutRatingBodyParams putRatingBodyParams = param_1;
            /* Act */
            retval = RequesterFactory.putRatingRequester(helpDeskUrl, fingerprintAuth, conversationId, ratingId, putRatingBodyParams);
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            Assert.assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            java.util.HashMap hashMap = new java.util.HashMap();
            hashMap.put("score", null);
            Assert.assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mRatingId"));
        }
    }
}
