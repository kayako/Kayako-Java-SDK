package com.kayako.sdk;

import com.diffblue.deeptestutils.Reflector;
import com.kayako.sdk.auth.FingerprintAuth;
import com.kayako.sdk.base.requester.Requester;
import com.kayako.sdk.messenger.message.PutMessageBodyParams;
import com.kayako.sdk.messenger.rating.PostRatingBodyParams;
import com.kayako.sdk.messenger.rating.PutRatingBodyParams;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.HashMap;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class RequesterFactoryTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: RequesterFactory */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        RequesterFactory instance;
        {
            /* Act */
            /* Creating object to test constructor */
            instance = new RequesterFactory();
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getArticleItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long articleId = 0L;
            /* Act */
            retval = RequesterFactory.getArticleItemRequester(helpCenterUrl, articleId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mArticleId"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getCategoryItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long categoryId = 0L;
            /* Act */
            retval = RequesterFactory.getCategoryItemRequester(helpCenterUrl, categoryId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpDeskUrl")));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mCategoryId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            FingerprintAuth auth = null;
            long conversationId = 0L;
            /* Act */
            retval = RequesterFactory.getConversationItemRequester(helpCenterUrl, auth, conversationId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"), "value"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationListRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            FingerprintAuth auth = null;
            int offset = 0;
            int limit = 0;
            /* Act */
            retval = RequesterFactory.getConversationListRequester(helpCenterUrl, auth, offset, limit);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mQueryParameters"));
            HashMap hashMap = new HashMap();
            hashMap.put("offset", "0");
            hashMap.put("limit", "0");
            assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mQueryParameters"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getConversationStarterItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            FingerprintAuth fingerprintAuth = null;
            /* Act */
            retval = RequesterFactory.getConversationStarterItemRequester(helpDeskUrl, fingerprintAuth);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mAuth"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLocaleItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long localeId = 0L;
            /* Act */
            retval = RequesterFactory.getLocaleItemRequester(helpCenterUrl, localeId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mLocaleId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getLocaleListRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            /* Act */
            retval = RequesterFactory.getLocaleListRequester(helpCenterUrl);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getMessageRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpdeskUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            long messageId = 0L;
            /* Act */
            retval = RequesterFactory.getMessageRequester(helpdeskUrl, fingerprintAuth, conversationId, messageId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpDeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"), "value"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mMessageId"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mMessageId"), "value"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getRatingListRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            /* Act */
            retval = RequesterFactory.getRatingListRequester(helpDeskUrl, fingerprintAuth, conversationId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getSectionItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long sectionId = 0L;
            /* Act */
            retval = RequesterFactory.getSectionItemRequester(helpCenterUrl, sectionId);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mSectionId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void postRatingRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.rating.Rating$SCORE");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            PostRatingBodyParams param1 = (PostRatingBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.rating.PostRatingBodyParams");
            Reflector.setField(param1, "comment", null);
            Reflector.setField(param1, "score", param0);
            PostRatingBodyParams postRatingBodyParams = param1;
            /* Act */
            retval = RequesterFactory.postRatingRequester(helpDeskUrl, fingerprintAuth, conversationId, postRatingBodyParams);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            HashMap hashMap = new HashMap();
            hashMap.put("score", null);
            hashMap.put("comment", null);
            assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void putMessageItemRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpCenterUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            long messageId = 0L;
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageBodyParams$MessageStatus");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            PutMessageBodyParams param1 = (PutMessageBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.message.PutMessageBodyParams");
            Reflector.setField(param1, "messageStatus", param0);
            PutMessageBodyParams putMessageBodyParams = param1;
            /* Act */
            retval = RequesterFactory.putMessageItemRequester(helpCenterUrl, fingerprintAuth, conversationId, messageId, putMessageBodyParams);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mMessageId"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpCenterUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            HashMap hashMap = new HashMap();
            hashMap.put("message_status", null);
            assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void putRatingRequester() throws Throwable {
        Requester retval;
        {
            /* Arrange */
            String helpDeskUrl = null;
            FingerprintAuth fingerprintAuth = null;
            long conversationId = 0L;
            long ratingId = 0L;
            Object param0 = Reflector.getInstance("com.kayako.sdk.messenger.rating.Rating$SCORE");
            Reflector.setField(param0, "name", null);
            Reflector.setField(param0, "ordinal", 0);
            PutRatingBodyParams param1 = (PutRatingBodyParams) Reflector.getInstance("com.kayako.sdk.messenger.rating.PutRatingBodyParams");
            Reflector.setField(param1, "score", param0);
            Reflector.setField(param1, "comment", null);
            PutRatingBodyParams putRatingBodyParams = param1;
            /* Act */
            retval = RequesterFactory.putRatingRequester(helpDeskUrl, fingerprintAuth, conversationId, ratingId, putRatingBodyParams);
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertNotNull(Reflector.getInstanceField(retval, "mRequestProperty"));
            assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mHelpdeskUrl")));
            assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mFingerprintAuth"));
            assertNotNull(Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            HashMap hashMap = new HashMap();
            hashMap.put("score", null);
            assertEquals(hashMap, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mBodyParams"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mConversationId"));
            assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "mRequestProperty"), "mRatingId"));
        }
    }
}
