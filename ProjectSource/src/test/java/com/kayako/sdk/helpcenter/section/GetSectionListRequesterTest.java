package com.kayako.sdk.helpcenter.section;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import java.lang.reflect.Constructor;

public class GetSectionListRequesterTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: GetSectionListRequester */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers:
     * conditional line 29 branch to line 29
     * conditional line 30 branch to line 30
     * conditional line 31 branch to line 31
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_section_GetSectionListRequester_getEndpointUrl_000_447d8272f9ab1c33() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            GetSectionListRequester param_2 = (GetSectionListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionListRequester");
            Reflector.setField(param_2, "mQueryParams", null);
            Reflector.setField(param_2, "mCategoryId", 0L);
            Reflector.setField(param_2, "mHelpCenterUrl", param_1);
            /* Act */
            retval = param_2.getEndpointUrl();
        }
        {
            /* Assert result */
            Assert.assertNotNull(retval);
            Assert.assertEquals("/api/v1/sections.json", retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_section_GetSectionListRequester_getHeaders_000_f39ea67d029aecc2() throws Throwable {
        java.util.Map<String, String> retval;
        {
            /* Arrange */
            String param_1 = "";
            GetSectionListRequester param_2 = (GetSectionListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionListRequester");
            Reflector.setField(param_2, "mQueryParams", null);
            Reflector.setField(param_2, "mCategoryId", 0L);
            Reflector.setField(param_2, "mHelpCenterUrl", param_1);
            /* Act */
            retval = param_2.getHeaders();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_section_GetSectionListRequester_getHelpCenterUrl_000_3710354a10cb2b6b() throws Throwable {
        String retval;
        {
            /* Arrange */
            GetSectionListRequester param_0 = (GetSectionListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionListRequester");
            Reflector.setField(param_0, "mQueryParams", null);
            Reflector.setField(param_0, "mCategoryId", 0L);
            Reflector.setField(param_0, "mHelpCenterUrl", null);
            /* Act */
            retval = param_0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_section_GetSectionListRequester_getQueryParameters_000_7f4bc7d2407d9153() throws Throwable {
        java.util.Map<String, String> retval;
        {
            /* Arrange */
            String param_1 = "";
            GetSectionListRequester param_2 = (GetSectionListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionListRequester");
            Reflector.setField(param_2, "mQueryParams", null);
            Reflector.setField(param_2, "mCategoryId", 0L);
            Reflector.setField(param_2, "mHelpCenterUrl", param_1);
            /* Act */
            retval = param_2.getQueryParameters();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }
}
