package com.kayako.sdk.helpcenter.user;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class UserMinimalTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: UserMinimal */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_user_UserMinimal_getAvatarUrl_000_265088d24f22dad4() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            UserMinimal param_4 = (UserMinimal) Reflector.getInstance("com.kayako.sdk.helpcenter.user.UserMinimal");
            Reflector.setField(param_4, "presenceChannel", param_1);
            Reflector.setField(param_4, "fullName", param_3);
            Reflector.setField(param_4, "lastSeenAt", null);
            Reflector.setField(param_4, "id", null);
            Reflector.setField(param_4, "avatarUrl", null);
            Reflector.setField(param_4, "lastActiveAt", null);
            /* Act */
            retval = param_4.getAvatarUrl();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_user_UserMinimal_getFullName_000_73316d372b594b50() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            UserMinimal param_4 = (UserMinimal) Reflector.getInstance("com.kayako.sdk.helpcenter.user.UserMinimal");
            Reflector.setField(param_4, "presenceChannel", param_1);
            Reflector.setField(param_4, "fullName", null);
            Reflector.setField(param_4, "lastSeenAt", null);
            Reflector.setField(param_4, "id", null);
            Reflector.setField(param_4, "avatarUrl", param_3);
            Reflector.setField(param_4, "lastActiveAt", null);
            /* Act */
            retval = param_4.getFullName();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_user_UserMinimal_getId_000_684c767f5c745e41() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            UserMinimal param_6 = (UserMinimal) Reflector.getInstance("com.kayako.sdk.helpcenter.user.UserMinimal");
            Reflector.setField(param_6, "presenceChannel", param_1);
            Reflector.setField(param_6, "fullName", param_5);
            Reflector.setField(param_6, "lastSeenAt", null);
            Reflector.setField(param_6, "id", null);
            Reflector.setField(param_6, "avatarUrl", param_3);
            Reflector.setField(param_6, "lastActiveAt", null);
            /* Act */
            retval = param_6.getId();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_user_UserMinimal_getLastActiveAt_000_e818fdc2f3f36237() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            UserMinimal param_6 = (UserMinimal) Reflector.getInstance("com.kayako.sdk.helpcenter.user.UserMinimal");
            Reflector.setField(param_6, "presenceChannel", param_1);
            Reflector.setField(param_6, "fullName", param_5);
            Reflector.setField(param_6, "lastSeenAt", null);
            Reflector.setField(param_6, "id", null);
            Reflector.setField(param_6, "avatarUrl", param_3);
            Reflector.setField(param_6, "lastActiveAt", null);
            /* Act */
            retval = param_6.getLastActiveAt();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_user_UserMinimal_getLastSeenAt_000_ba9162d6f4fc3e61() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            UserMinimal param_6 = (UserMinimal) Reflector.getInstance("com.kayako.sdk.helpcenter.user.UserMinimal");
            Reflector.setField(param_6, "presenceChannel", param_1);
            Reflector.setField(param_6, "fullName", param_5);
            Reflector.setField(param_6, "lastSeenAt", null);
            Reflector.setField(param_6, "id", null);
            Reflector.setField(param_6, "avatarUrl", param_3);
            Reflector.setField(param_6, "lastActiveAt", null);
            /* Act */
            retval = param_6.getLastSeenAt();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_user_UserMinimal_getPresenceChannel_000_2e1d6839dca1360e() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            UserMinimal param_4 = (UserMinimal) Reflector.getInstance("com.kayako.sdk.helpcenter.user.UserMinimal");
            Reflector.setField(param_4, "presenceChannel", null);
            Reflector.setField(param_4, "fullName", param_3);
            Reflector.setField(param_4, "lastSeenAt", null);
            Reflector.setField(param_4, "id", null);
            Reflector.setField(param_4, "avatarUrl", param_1);
            Reflector.setField(param_4, "lastActiveAt", null);
            /* Act */
            retval = param_4.getPresenceChannel();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
}
