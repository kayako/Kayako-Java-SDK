package com.kayako.sdk.helpcenter.section;

import com.diffblue.deeptestutils.Reflector;
import java.lang.reflect.Constructor;
import java.util.Map;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class GetSectionRequesterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: GetSectionRequester */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init() throws Throwable {
        GetSectionRequester instance;
        {
            /* Arrange */
            String helpCenterUrl = null;
            long sectionId = 0L;
            /* Act */
            /* Creating object to test constructor */
            instance = new GetSectionRequester(helpCenterUrl, sectionId);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void init1() throws Throwable {
        Object instance;
        {
            /* Act */
            /* Creating object to test constructor */
            Class<?> c = Reflector.forName("com.kayako.sdk.helpcenter.section.GetSectionRequester");
            Constructor<?> ctor = c.getDeclaredConstructor();
            ctor.setAccessible(true);
            instance = ctor.newInstance();
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHeaders() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetSectionRequester param2 = (GetSectionRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionRequester");
            Reflector.setField(param2, "mSectionId", 0L);
            Reflector.setField(param2, "mHelpCenterUrl", param1);
            /* Act */
            retval = param2.getHeaders();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getHelpCenterUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            GetSectionRequester param0 = (GetSectionRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionRequester");
            Reflector.setField(param0, "mSectionId", 0L);
            Reflector.setField(param0, "mHelpCenterUrl", null);
            /* Act */
            retval = param0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void getQueryParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetSectionRequester param2 = (GetSectionRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.section.GetSectionRequester");
            Reflector.setField(param2, "mSectionId", 0L);
            Reflector.setField(param2, "mHelpCenterUrl", param1);
            /* Act */
            retval = param2.getQueryParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
