package com.kayako.sdk.helpcenter.locale;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class LocaleTest {

    @org.junit.Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: Locale */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getDirection_000_9f13875f2ded9c94() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            Locale param_10 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_10, "direction", null);
            Reflector.setField(param_10, "isPublic", null);
            Reflector.setField(param_10, "region", param_3);
            Reflector.setField(param_10, "isLocalized", null);
            Reflector.setField(param_10, "id", null);
            Reflector.setField(param_10, "locale", param_9);
            Reflector.setField(param_10, "nativeRegion", param_1);
            Reflector.setField(param_10, "name", param_7);
            Reflector.setField(param_10, "nativeName", param_5);
            /* Act */
            retval = param_10.getDirection();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getId_000_87b8ad6bcd31b5f2() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            String param_11 = "";
            Locale param_12 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_12, "direction", param_1);
            Reflector.setField(param_12, "isPublic", null);
            Reflector.setField(param_12, "region", param_5);
            Reflector.setField(param_12, "isLocalized", null);
            Reflector.setField(param_12, "id", null);
            Reflector.setField(param_12, "locale", param_11);
            Reflector.setField(param_12, "nativeRegion", param_3);
            Reflector.setField(param_12, "name", param_9);
            Reflector.setField(param_12, "nativeName", param_7);
            /* Act */
            retval = param_12.getId();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getLocale_000_f234b9c8f7784f03() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            Locale param_10 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_10, "direction", param_1);
            Reflector.setField(param_10, "isPublic", null);
            Reflector.setField(param_10, "region", param_5);
            Reflector.setField(param_10, "isLocalized", null);
            Reflector.setField(param_10, "id", null);
            Reflector.setField(param_10, "locale", null);
            Reflector.setField(param_10, "nativeRegion", param_3);
            Reflector.setField(param_10, "name", param_9);
            Reflector.setField(param_10, "nativeName", param_7);
            /* Act */
            retval = param_10.getLocale();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getName_000_9393b6b8e2a1367() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            Locale param_10 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_10, "direction", param_1);
            Reflector.setField(param_10, "isPublic", null);
            Reflector.setField(param_10, "region", param_5);
            Reflector.setField(param_10, "isLocalized", null);
            Reflector.setField(param_10, "id", null);
            Reflector.setField(param_10, "locale", param_9);
            Reflector.setField(param_10, "nativeRegion", param_3);
            Reflector.setField(param_10, "name", null);
            Reflector.setField(param_10, "nativeName", param_7);
            /* Act */
            retval = param_10.getName();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getNativeName_000_8b5733b71e013eb2() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            Locale param_10 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_10, "direction", param_1);
            Reflector.setField(param_10, "isPublic", null);
            Reflector.setField(param_10, "region", param_5);
            Reflector.setField(param_10, "isLocalized", null);
            Reflector.setField(param_10, "id", null);
            Reflector.setField(param_10, "locale", param_9);
            Reflector.setField(param_10, "nativeRegion", param_3);
            Reflector.setField(param_10, "name", param_7);
            Reflector.setField(param_10, "nativeName", null);
            /* Act */
            retval = param_10.getNativeName();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getNativeRegion_000_5c02146033d5f76f() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            Locale param_10 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_10, "direction", param_1);
            Reflector.setField(param_10, "isPublic", null);
            Reflector.setField(param_10, "region", param_3);
            Reflector.setField(param_10, "isLocalized", null);
            Reflector.setField(param_10, "id", null);
            Reflector.setField(param_10, "locale", param_9);
            Reflector.setField(param_10, "nativeRegion", null);
            Reflector.setField(param_10, "name", param_7);
            Reflector.setField(param_10, "nativeName", param_5);
            /* Act */
            retval = param_10.getNativeRegion();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_getRegion_000_ab79e842da1abea6() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            Locale param_10 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_10, "direction", param_1);
            Reflector.setField(param_10, "isPublic", null);
            Reflector.setField(param_10, "region", null);
            Reflector.setField(param_10, "isLocalized", null);
            Reflector.setField(param_10, "id", null);
            Reflector.setField(param_10, "locale", param_9);
            Reflector.setField(param_10, "nativeRegion", param_3);
            Reflector.setField(param_10, "name", param_7);
            Reflector.setField(param_10, "nativeName", param_5);
            /* Act */
            retval = param_10.getRegion();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_isLocalized_000_2a883c489b039960() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            String param_11 = "";
            Locale param_12 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_12, "direction", param_1);
            Reflector.setField(param_12, "isPublic", null);
            Reflector.setField(param_12, "region", param_5);
            Reflector.setField(param_12, "isLocalized", null);
            Reflector.setField(param_12, "id", null);
            Reflector.setField(param_12, "locale", param_11);
            Reflector.setField(param_12, "nativeRegion", param_3);
            Reflector.setField(param_12, "name", param_9);
            Reflector.setField(param_12, "nativeName", param_7);
            /* Act */
            retval = param_12.isLocalized();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }

    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    @Test
    public void com_kayako_sdk_helpcenter_locale_Locale_isPublic_000_9d1bab462836fce1() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param_1 = "";
            String param_3 = "";
            String param_5 = "";
            String param_7 = "";
            String param_9 = "";
            String param_11 = "";
            Locale param_12 = (Locale) Reflector.getInstance("com.kayako.sdk.helpcenter.locale.Locale");
            Reflector.setField(param_12, "direction", param_1);
            Reflector.setField(param_12, "isPublic", null);
            Reflector.setField(param_12, "region", param_5);
            Reflector.setField(param_12, "isLocalized", null);
            Reflector.setField(param_12, "id", null);
            Reflector.setField(param_12, "locale", param_11);
            Reflector.setField(param_12, "nativeRegion", param_3);
            Reflector.setField(param_12, "name", param_9);
            Reflector.setField(param_12, "nativeName", param_7);
            /* Act */
            retval = param_12.isPublic();
        }
        {
            /* Assert result */
            Assert.assertEquals(null, retval);
        }
    }
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
    /*
     * Test generated by Diffblue Deeptest.
     * This test case covers the entire function.
     */
}
