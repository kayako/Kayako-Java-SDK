package com.kayako.sdk.helpcenter.locale;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class LocaleTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: Locale */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void init() throws Throwable {
        Locale instance;
        {
            /* Act */
            /* Creating object to test constructor */
            instance = new Locale();
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getDirection() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Locale param10 = new Locale();
            Reflector.setField(param10, "direction", null);
            Reflector.setField(param10, "isPublic", null);
            Reflector.setField(param10, "region", param3);
            Reflector.setField(param10, "isLocalized", null);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "locale", param9);
            Reflector.setField(param10, "nativeRegion", param1);
            Reflector.setField(param10, "name", param7);
            Reflector.setField(param10, "nativeName", param5);
            /* Act */
            retval = param10.getDirection();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getId() throws Throwable {
        Long retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            String param11 = "";
            Locale param12 = new Locale();
            Reflector.setField(param12, "direction", param1);
            Reflector.setField(param12, "isPublic", null);
            Reflector.setField(param12, "region", param5);
            Reflector.setField(param12, "isLocalized", null);
            Reflector.setField(param12, "id", null);
            Reflector.setField(param12, "locale", param11);
            Reflector.setField(param12, "nativeRegion", param3);
            Reflector.setField(param12, "name", param9);
            Reflector.setField(param12, "nativeName", param7);
            /* Act */
            retval = param12.getId();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }


    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getLocale() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Locale param10 = new Locale();
            Reflector.setField(param10, "direction", param1);
            Reflector.setField(param10, "isPublic", null);
            Reflector.setField(param10, "region", param5);
            Reflector.setField(param10, "isLocalized", null);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "locale", null);
            Reflector.setField(param10, "nativeRegion", param3);
            Reflector.setField(param10, "name", param9);
            Reflector.setField(param10, "nativeName", param7);
            /* Act */
            retval = param10.getLocale();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getName() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Locale param10 = new Locale();
            Reflector.setField(param10, "direction", param1);
            Reflector.setField(param10, "isPublic", null);
            Reflector.setField(param10, "region", param5);
            Reflector.setField(param10, "isLocalized", null);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "locale", param9);
            Reflector.setField(param10, "nativeRegion", param3);
            Reflector.setField(param10, "name", null);
            Reflector.setField(param10, "nativeName", param7);
            /* Act */
            retval = param10.getName();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getNativeName() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Locale param10 = new Locale();
            Reflector.setField(param10, "direction", param1);
            Reflector.setField(param10, "isPublic", null);
            Reflector.setField(param10, "region", param5);
            Reflector.setField(param10, "isLocalized", null);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "locale", param9);
            Reflector.setField(param10, "nativeRegion", param3);
            Reflector.setField(param10, "name", param7);
            Reflector.setField(param10, "nativeName", null);
            /* Act */
            retval = param10.getNativeName();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getNativeRegion() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Locale param10 = new Locale();
            Reflector.setField(param10, "direction", param1);
            Reflector.setField(param10, "isPublic", null);
            Reflector.setField(param10, "region", param3);
            Reflector.setField(param10, "isLocalized", null);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "locale", param9);
            Reflector.setField(param10, "nativeRegion", null);
            Reflector.setField(param10, "name", param7);
            Reflector.setField(param10, "nativeName", param5);
            /* Act */
            retval = param10.getNativeRegion();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getRegion() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            Locale param10 = new Locale();
            Reflector.setField(param10, "direction", param1);
            Reflector.setField(param10, "isPublic", null);
            Reflector.setField(param10, "region", null);
            Reflector.setField(param10, "isLocalized", null);
            Reflector.setField(param10, "id", null);
            Reflector.setField(param10, "locale", param9);
            Reflector.setField(param10, "nativeRegion", param3);
            Reflector.setField(param10, "name", param7);
            Reflector.setField(param10, "nativeName", param5);
            /* Act */
            retval = param10.getRegion();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void isLocalized() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            String param11 = "";
            Locale param12 = new Locale();
            Reflector.setField(param12, "direction", param1);
            Reflector.setField(param12, "isPublic", null);
            Reflector.setField(param12, "region", param5);
            Reflector.setField(param12, "isLocalized", null);
            Reflector.setField(param12, "id", null);
            Reflector.setField(param12, "locale", param11);
            Reflector.setField(param12, "nativeRegion", param3);
            Reflector.setField(param12, "name", param9);
            Reflector.setField(param12, "nativeName", param7);
            /* Act */
            retval = param12.isLocalized();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void isPublic() throws Throwable {
        Boolean retval;
        {
            /* Arrange */
            String param1 = "";
            String param3 = "";
            String param5 = "";
            String param7 = "";
            String param9 = "";
            String param11 = "";
            Locale param12 = new Locale();
            Reflector.setField(param12, "direction", param1);
            Reflector.setField(param12, "isPublic", null);
            Reflector.setField(param12, "region", param5);
            Reflector.setField(param12, "isLocalized", null);
            Reflector.setField(param12, "id", null);
            Reflector.setField(param12, "locale", param11);
            Reflector.setField(param12, "nativeRegion", param3);
            Reflector.setField(param12, "name", param9);
            Reflector.setField(param12, "nativeName", param7);
            /* Act */
            retval = param12.isPublic();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
}
