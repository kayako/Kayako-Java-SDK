package com.kayako.sdk.helpcenter.category;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class GetCategoryListRequesterTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: GetCategoryListRequester */
    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 24 branch to line 24
   * conditional line 25 branch to line 25
   */
    @Test
    public void init() throws Throwable {
        GetCategoryListRequester instance;
        {
            /* Arrange */
            String param2 = "??????????";
            String helpDeskUrl = param2;
            int offset = 0;
            int limit = 8;
            /* Act */
            /* Creating object to test constructor */
            instance = new GetCategoryListRequester(helpDeskUrl, offset, limit);
            assertNotNull(instance);
        /* Method return type is void, or not expected to return */
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getEndpointUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            String param1 = "";
            GetCategoryListRequester param2 = (GetCategoryListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.category.GetCategoryListRequester");
            Reflector.setField(param2, "mHelpDeskUrl", param1);
            Reflector.setField(param2, "mQueryParams", null);
            /* Act */
            retval = param2.getEndpointUrl();
        }
        {
            /* Assert result */
            assertNotNull(retval);
            assertEquals("/api/v1/categories.json", retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getHeaders() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetCategoryListRequester param2 = (GetCategoryListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.category.GetCategoryListRequester");
            Reflector.setField(param2, "mHelpDeskUrl", param1);
            Reflector.setField(param2, "mQueryParams", null);
            /* Act */
            retval = param2.getHeaders();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getHelpCenterUrl() throws Throwable {
        String retval;
        {
            /* Arrange */
            GetCategoryListRequester param0 = (GetCategoryListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.category.GetCategoryListRequester");
            Reflector.setField(param0, "mHelpDeskUrl", null);
            Reflector.setField(param0, "mQueryParams", null);
            /* Act */
            retval = param0.getHelpCenterUrl();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }


    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */
    @Test
    public void getQueryParameters() throws Throwable {
        Map<String, String> retval;
        {
            /* Arrange */
            String param1 = "";
            GetCategoryListRequester param2 = (GetCategoryListRequester) Reflector.getInstance("com.kayako.sdk.helpcenter.category.GetCategoryListRequester");
            Reflector.setField(param2, "mHelpDeskUrl", param1);
            Reflector.setField(param2, "mQueryParams", null);
            /* Act */
            retval = param2.getQueryParameters();
        }
        {
            /* Assert result */
            assertEquals(null, retval);
        }
    }
}
